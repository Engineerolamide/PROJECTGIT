{
	"name": "NotebookMedallion",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "OlamidePool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "6f178260-13b4-48c6-a86b-db1112382c82"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5fd14507-37c9-4fcd-a6e8-2b36c7a73511/resourceGroups/RG-Olamide/providers/Microsoft.Synapse/workspaces/synapseworkspace-olamide/bigDataPools/OlamidePool",
				"name": "OlamidePool",
				"type": "Spark",
				"endpoint": "https://synapseworkspace-olamide.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/OlamidePool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": true
					}
				},
				"source": [
					"# Bronze Layer - Ingest PQ from ADLS\n",
					"from pyspark.sql.functions import col, to_date, lower\n",
					"df_bronze = spark.read.parquet(\"abfss://projectmedalion@storagedatalakeengineer.dfs.core.windows.net/bronze/manish040596/azure-data-engineer-projects/refs/heads/main/retail_transactions_bronze.parquet\")\n",
					"df_bronze.show()"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": true
					}
				},
				"source": [
					"# Silver Layer - Filter purchase & clean data\n",
					"\n",
					"df_silver = (\n",
					"    df_bronze\n",
					"    .filter(col(\"event_type\") == \"purchase\")\n",
					"    .dropna(subset=[\"customer_id\", \"amount\"])\n",
					"    .withColumn(\"event_date\", to_date(col(\"event_timestamp\")))\n",
					"    .withColumn(\"payment_method\", lower(col(\"payment_method\")))\n",
					"    .withColumn(\"amount\", col(\"amount\").cast(\"float\"))\n",
					"    .select(\n",
					"        \"event_id\", \"customer_id\", \"event_date\", \"product_id\",\n",
					"        \"product_category\", \"payment_method\", \"amount\", \"location\"\n",
					"    )\n",
					")\n",
					"df_silver.write.mode(\"overwrite\").parquet(\"abfss://projectmedalion@storagedatalakeengineer.dfs.core.windows.net/silver/\")\n",
					"\n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": true
					}
				},
				"source": [
					"df_silver.show()"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"\n",
					"# Gold Layer - Aggregates\n",
					"from pyspark.sql.functions import sum, count, col\n",
					"\n",
					"df_silver = spark.read.parquet(\"abfss://projectmedalion@storagedatalakeengineer.dfs.core.windows.net/silver/\")\n",
					"\n",
					"df_daily_revenue = (\n",
					"    df_silver.groupBy(\"event_date\")\n",
					"    .agg(sum(\"amount\").alias(\"daily_revenue\"), count(\"*\").alias(\"total_purchases\"))\n",
					")\n",
					"\n",
					"df_daily_revenue.write.mode(\"overwrite\").parquet(\"abfss://projectmedalion@storagedatalakeengineer.dfs.core.windows.net/gold/\")\n",
					"\n",
					""
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"source": [
					"df_daily_revenue.show()"
				],
				"execution_count": 11
			}
		]
	}
}